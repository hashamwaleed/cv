/*
 * BitcasaLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package io.cloudfs.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.type.TypeReference;
import org.joda.time.DateTime;

import io.cloudfs.*;
import io.cloudfs.models.*;
import io.cloudfs.exceptions.*;
import io.cloudfs.http.client.HttpClient;
import io.cloudfs.http.client.HttpContext;
import io.cloudfs.http.request.HttpRequest;
import io.cloudfs.http.response.HttpResponse;
import io.cloudfs.http.response.HttpStringResponse;
import io.cloudfs.http.client.APICallBack;
import io.cloudfs.controllers.syncwrapper.APICallBackCatcher;

public class FoldersOperationsController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static FoldersOperationsController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the FoldersOperationsController class 
     */
    public static FoldersOperationsController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new FoldersOperationsController();
            }
        }
        return instance;
    }

    /**
     * TODO: type endpoint description here
     * @param    path    Required parameter: Example: 
     * @param    name    Required parameter: Example: 
     * @param    exists    Optional parameter: Example: 
     * @return    Returns the CreateFolderResponse response from the API call 
     */
    public CreateFolderResponse createFolder(
                final String path,
                final String name,
                final ExistsEnum exists
    ) throws Throwable {
        APICallBackCatcher<CreateFolderResponse> callback = new APICallBackCatcher<CreateFolderResponse>();
        createFolderAsync(path, name, exists, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * TODO: type endpoint description here
     * @param    path    Required parameter: Example: 
     * @param    name    Required parameter: Example: 
     * @param    exists    Optional parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void createFolderAsync(
                final String path,
                final String name,
                final ExistsEnum exists,
                final APICallBack<CreateFolderResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = String.format(Configuration.baseUri, Configuration.accountId);

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/v2/folders/{path}?operation=create");

                //process template parameters
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
                    private static final long serialVersionUID = 4889689400195967003L;
                    {
                        put( "path", path );
                    }});
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 5328248880989330090L;
                    {
                        put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
                        put( "user-agent", "APIMATIC 2.0" );
                        put( "accept", "application/json" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = 5072241904412177807L;
                    {
                        put( "name", name );
                        put( "exists", (exists != null) ? exists.value() : null );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters));

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            CreateFolderResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<CreateFolderResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * TODO: type endpoint description here
     * @param    path    Required parameter: Example: 
     * @param    to    Required parameter: Example: 
     * @param    name    Required parameter: Example: 
     * @param    exists    Optional parameter: Example: 
     * @return    Returns the ListSingleFileVersionResponse response from the API call 
     */
    public ListSingleFileVersionResponse createCopyFolder(
                final String path,
                final String to,
                final String name,
                final ExistsEnum exists
    ) throws Throwable {
        APICallBackCatcher<ListSingleFileVersionResponse> callback = new APICallBackCatcher<ListSingleFileVersionResponse>();
        createCopyFolderAsync(path, to, name, exists, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * TODO: type endpoint description here
     * @param    path    Required parameter: Example: 
     * @param    to    Required parameter: Example: 
     * @param    name    Required parameter: Example: 
     * @param    exists    Optional parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void createCopyFolderAsync(
                final String path,
                final String to,
                final String name,
                final ExistsEnum exists,
                final APICallBack<ListSingleFileVersionResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = String.format(Configuration.baseUri, Configuration.accountId);

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/v2/folders/{path}?operation=copy");

                //process template parameters
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
                    private static final long serialVersionUID = 5270064677924154292L;
                    {
                        put( "path", path );
                    }});
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 5203701099325703462L;
                    {
                        put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
                        put( "user-agent", "APIMATIC 2.0" );
                        put( "accept", "application/json" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = 4765453685502454954L;
                    {
                        put( "to", to );
                        put( "name", name );
                        put( "exists", (exists != null) ? exists.value() : null );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters));

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            ListSingleFileVersionResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<ListSingleFileVersionResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * TODO: type endpoint description here
     * @param    path    Required parameter: Example: 
     * @param    to    Required parameter: Example: 
     * @param    name    Required parameter: Example: 
     * @param    exists    Optional parameter: Example: 
     * @return    Returns the ListSingleFileVersionResponse response from the API call 
     */
    public ListSingleFileVersionResponse createMoveFolder(
                final String path,
                final String to,
                final String name,
                final ExistsEnum exists
    ) throws Throwable {
        APICallBackCatcher<ListSingleFileVersionResponse> callback = new APICallBackCatcher<ListSingleFileVersionResponse>();
        createMoveFolderAsync(path, to, name, exists, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * TODO: type endpoint description here
     * @param    path    Required parameter: Example: 
     * @param    to    Required parameter: Example: 
     * @param    name    Required parameter: Example: 
     * @param    exists    Optional parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void createMoveFolderAsync(
                final String path,
                final String to,
                final String name,
                final ExistsEnum exists,
                final APICallBack<ListSingleFileVersionResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = String.format(Configuration.baseUri, Configuration.accountId);

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/v2/folders/{path}?operation=move");

                //process template parameters
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
                    private static final long serialVersionUID = 4994110869080182423L;
                    {
                        put( "path", path );
                    }});
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 5619726830158427750L;
                    {
                        put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
                        put( "user-agent", "APIMATIC 2.0" );
                        put( "accept", "application/json" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = 5736641834102414241L;
                    {
                        put( "to", to );
                        put( "name", name );
                        put( "exists", (exists != null) ? exists.value() : null );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters));

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            ListSingleFileVersionResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<ListSingleFileVersionResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * TODO: type endpoint description here
     * @param    path    Required parameter: Example: 
     * @return    Returns the ListSingleFileVersionResponse response from the API call 
     */
    public ListSingleFileVersionResponse getFolderMeta(
                final String path
    ) throws Throwable {
        APICallBackCatcher<ListSingleFileVersionResponse> callback = new APICallBackCatcher<ListSingleFileVersionResponse>();
        getFolderMetaAsync(path, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * TODO: type endpoint description here
     * @param    path    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void getFolderMetaAsync(
                final String path,
                final APICallBack<ListSingleFileVersionResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = String.format(Configuration.baseUri, Configuration.accountId);

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/v2/folders/{path}/meta");

                //process template parameters
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
                    private static final long serialVersionUID = 4810570337145275478L;
                    {
                        put( "path", path );
                    }});
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 5053347030065762109L;
                    {
                        put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
                        put( "user-agent", "APIMATIC 2.0" );
                        put( "accept", "application/json" );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            ListSingleFileVersionResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<ListSingleFileVersionResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * TODO: type endpoint description here
     * @param    operation    Required parameter: Example: 
     * @param    name    Required parameter: Example: 
     * @param    version    Required parameter: Example: 
     * @param    versionConflict    Required parameter: Example: 
     * @param    path    Optional parameter: Example: 
     * @param    dateCreated    Optional parameter: Example: 
     * @param    dateMetaLastModified    Optional parameter: Example: 
     * @param    dateContentLastModified    Optional parameter: Example: 
     * @param    applicationData    Optional parameter: Example: 
     * @return    Returns the ListSingleFileVersionResponse response from the API call 
     */
    public ListSingleFileVersionResponse alterFolderMeta(
                final String operation,
                final String name,
                final int version,
                final String versionConflict,
                final String path,
                final DateTime dateCreated,
                final DateTime dateMetaLastModified,
                final DateTime dateContentLastModified,
                final Object applicationData
    ) throws Throwable {
        APICallBackCatcher<ListSingleFileVersionResponse> callback = new APICallBackCatcher<ListSingleFileVersionResponse>();
        alterFolderMetaAsync(operation, name, version, versionConflict, path, dateCreated, dateMetaLastModified, dateContentLastModified, applicationData, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * TODO: type endpoint description here
     * @param    operation    Required parameter: Example: 
     * @param    name    Required parameter: Example: 
     * @param    version    Required parameter: Example: 
     * @param    versionConflict    Required parameter: Example: 
     * @param    path    Optional parameter: Example: 
     * @param    dateCreated    Optional parameter: Example: 
     * @param    dateMetaLastModified    Optional parameter: Example: 
     * @param    dateContentLastModified    Optional parameter: Example: 
     * @param    applicationData    Optional parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void alterFolderMetaAsync(
                final String operation,
                final String name,
                final int version,
                final String versionConflict,
                final String path,
                final DateTime dateCreated,
                final DateTime dateMetaLastModified,
                final DateTime dateContentLastModified,
                final Object applicationData,
                final APICallBack<ListSingleFileVersionResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = String.format(Configuration.baseUri, Configuration.accountId);

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/v2/folders/{path}/meta");

                //process template parameters
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
                    private static final long serialVersionUID = 5362957280189530825L;
                    {
                        put( "operation", operation );
                        put( "path", path );
                    }});
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 5389991254517883934L;
                    {
                        put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
                        put( "user-agent", "APIMATIC 2.0" );
                        put( "accept", "application/json" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = 4998674344067478862L;
                    {
                        put( "name", name );
                        put( "version", version );
                        put( "version-conflict", versionConflict );
                        put( "date_created", DateTimeHelper.toRfc8601DateTime(dateCreated) );
                        put( "date_meta_last_modified", DateTimeHelper.toRfc8601DateTime(dateMetaLastModified) );
                        put( "date_content_last_modified", DateTimeHelper.toRfc8601DateTime(dateContentLastModified) );
                        put( "application_data", applicationData );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters));

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            ListSingleFileVersionResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<ListSingleFileVersionResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * TODO: type endpoint description here
     * @param    path    Required parameter: Example: 
     * @param    commit    Optional parameter: Example: 
     * @param    force    Optional parameter: Example: 
     * @return    Returns the DeleteFileResponse response from the API call 
     */
    public DeleteFileResponse deleteFolder(
                final String path,
                final String commit,
                final String force
    ) throws Throwable {
        APICallBackCatcher<DeleteFileResponse> callback = new APICallBackCatcher<DeleteFileResponse>();
        deleteFolderAsync(path, commit, force, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * TODO: type endpoint description here
     * @param    path    Required parameter: Example: 
     * @param    commit    Optional parameter: Example: 
     * @param    force    Optional parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void deleteFolderAsync(
                final String path,
                final String commit,
                final String force,
                final APICallBack<DeleteFileResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = String.format(Configuration.baseUri, Configuration.accountId);

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/v2/folders/{path}");

                //process template parameters
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
                    private static final long serialVersionUID = 5484377546237600795L;
                    {
                        put( "path", path );
                    }});

                //process query parameters
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
                    private static final long serialVersionUID = 4846367863948848754L;
                    {
                        put( "commit", commit );
                        put( "force", force );
                    }});
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 5046542262326745230L;
                    {
                        put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
                        put( "user-agent", "APIMATIC 2.0" );
                        put( "accept", "application/json" );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().delete(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            DeleteFileResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<DeleteFileResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * TODO: type endpoint description here
     * @param    path    Optional parameter: Example: 
     * @param    depth    Optional parameter: Example: 
     * @param    filter    Optional parameter: Example: 
     * @param    strictTraverse    Optional parameter: Example: 
     * @return    Returns the ListFolderResponse response from the API call 
     */
    public ListFolderResponse listFolder(
                final String path,
                final String depth,
                final String filter,
                final String strictTraverse
    ) throws Throwable {
        APICallBackCatcher<ListFolderResponse> callback = new APICallBackCatcher<ListFolderResponse>();
        listFolderAsync(path, depth, filter, strictTraverse, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * TODO: type endpoint description here
     * @param    path    Optional parameter: Example: 
     * @param    depth    Optional parameter: Example: 
     * @param    filter    Optional parameter: Example: 
     * @param    strictTraverse    Optional parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void listFolderAsync(
                final String path,
                final String depth,
                final String filter,
                final String strictTraverse,
                final APICallBack<ListFolderResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = String.format(Configuration.baseUri, Configuration.accountId);

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/v2/folders/{path}");

                //process template parameters
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
                    private static final long serialVersionUID = 5275189159721150074L;
                    {
                        put( "path", path );
                    }});

                //process query parameters
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
                    private static final long serialVersionUID = 4981878673011127853L;
                    {
                        put( "depth", depth );
                        put( "filter", filter );
                        put( "strict-traverse", strictTraverse );
                    }});
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 5009379536379596188L;
                    {
                        put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
                        put( "user-agent", "APIMATIC 2.0" );
                        put( "accept", "application/json" );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            ListFolderResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<ListFolderResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}