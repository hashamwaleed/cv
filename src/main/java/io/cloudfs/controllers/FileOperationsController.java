/*
 * BitcasaLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package io.cloudfs.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.type.TypeReference;
import org.joda.time.DateTime;

import io.cloudfs.*;
import io.cloudfs.models.*;
import io.cloudfs.exceptions.*;
import io.cloudfs.http.client.HttpClient;
import io.cloudfs.http.client.HttpContext;
import io.cloudfs.http.request.HttpRequest;
import io.cloudfs.http.response.HttpResponse;
import io.cloudfs.http.response.HttpStringResponse;
import io.cloudfs.http.client.APICallBack;
import io.cloudfs.controllers.syncwrapper.APICallBackCatcher;

public class FileOperationsController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static FileOperationsController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the FileOperationsController class 
     */
    public static FileOperationsController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new FileOperationsController();
            }
        }
        return instance;
    }

    /**
     * TODO: type endpoint description here
     * @param    path    Required parameter: Base64-encoded path to any location in the authenticated user�s account.
     * @param    range    Optional parameter: Example: 
     * @param    version    Optional parameter: Example: 
     * @param    versionConflict    Optional parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void getDownloadFile(
                final String path,
                final String range,
                final Integer version,
                final String versionConflict
    ) throws Throwable {
        APICallBackCatcher<Object> callback = new APICallBackCatcher<Object>();
        getDownloadFileAsync(path, range, version, versionConflict, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        callback.getResult();
    }

    /**
     * TODO: type endpoint description here
     * @param    path    Required parameter: Base64-encoded path to any location in the authenticated user�s account.
     * @param    range    Optional parameter: Example: 
     * @param    version    Optional parameter: Example: 
     * @param    versionConflict    Optional parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void getDownloadFileAsync(
                final String path,
                final String range,
                final Integer version,
                final String versionConflict,
                final APICallBack<Object> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = String.format(Configuration.baseUri, Configuration.accountId);

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/v2/files/{path}/");

                //process template parameters
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
                    private static final long serialVersionUID = 5412682312077276519L;
                    {
                        put( "path", path );
                    }});

                //process query parameters
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
                    private static final long serialVersionUID = 4805263909522043436L;
                    {
                        put( "version", version );
                        put( "version-conflict", versionConflict );
                    }});
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 4689299225292771263L;
                    {
                        put( "Range", range );
                        put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
                        put( "user-agent", "APIMATIC 2.0" );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 400)
                                throw new APIException("Version was not supplied, or version was not the current version.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //let the caller know of the success
                            callBack.onSuccess(_context, _context);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * TODO: type endpoint description here
     * @param    path    Required parameter: Example: 
     * @param    to    Required parameter: Example: 
     * @param    name    Required parameter: Example: 
     * @param    exists    Optional parameter: Example: rename
     * @return    Returns the CopyAndMoveFileResponse response from the API call 
     */
    public CopyAndMoveFileResponse createCopyFile(
                final String path,
                final String to,
                final String name,
                final ExistsEnum exists
    ) throws Throwable {
        APICallBackCatcher<CopyAndMoveFileResponse> callback = new APICallBackCatcher<CopyAndMoveFileResponse>();
        createCopyFileAsync(path, to, name, exists, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * TODO: type endpoint description here
     * @param    path    Required parameter: Example: 
     * @param    to    Required parameter: Example: 
     * @param    name    Required parameter: Example: 
     * @param    exists    Optional parameter: Example: rename
     * @return    Returns the void response from the API call 
     */
    public void createCopyFileAsync(
                final String path,
                final String to,
                final String name,
                final ExistsEnum exists,
                final APICallBack<CopyAndMoveFileResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = String.format(Configuration.baseUri, Configuration.accountId);

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/v2/files/{path}?operation=copy");

                //process template parameters
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
                    private static final long serialVersionUID = 5755470365744502439L;
                    {
                        put( "path", path );
                    }});
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 5435991802864173734L;
                    {
                        put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
                        put( "user-agent", "APIMATIC 2.0" );
                        put( "accept", "application/json" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = 4993078077832543024L;
                    {
                        put( "to", to );
                        put( "name", name );
                        put( "exists", (exists != null) ? exists.value() : "rename" );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters));

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            CopyAndMoveFileResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<CopyAndMoveFileResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * TODO: type endpoint description here
     * @param    path    Required parameter: Example: 
     * @param    to    Required parameter: Example: 
     * @param    name    Optional parameter: Example: 
     * @param    exists    Optional parameter: Example: 
     * @return    Returns the CopyAndMoveFileResponse response from the API call 
     */
    public CopyAndMoveFileResponse createMoveFile(
                final String path,
                final String to,
                final String name,
                final ExistsEnum exists
    ) throws Throwable {
        APICallBackCatcher<CopyAndMoveFileResponse> callback = new APICallBackCatcher<CopyAndMoveFileResponse>();
        createMoveFileAsync(path, to, name, exists, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * TODO: type endpoint description here
     * @param    path    Required parameter: Example: 
     * @param    to    Required parameter: Example: 
     * @param    name    Optional parameter: Example: 
     * @param    exists    Optional parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void createMoveFileAsync(
                final String path,
                final String to,
                final String name,
                final ExistsEnum exists,
                final APICallBack<CopyAndMoveFileResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = String.format(Configuration.baseUri, Configuration.accountId);

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/v2/files/{path}?operation=move");

                //process template parameters
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
                    private static final long serialVersionUID = 4892981051120898066L;
                    {
                        put( "path", path );
                    }});
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 4967744390956256063L;
                    {
                        put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
                        put( "user-agent", "APIMATIC 2.0" );
                        put( "accept", "application/json" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = 4629414493733060226L;
                    {
                        put( "to", to );
                        put( "name", name );
                        put( "exists", (exists != null) ? exists.value() : null );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters));

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            CopyAndMoveFileResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<CopyAndMoveFileResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * TODO: type endpoint description here
     * @param    path    Required parameter: Example: 
     * @param    commit    Optional parameter: Example: false
     * @return    Returns the DeleteFileResponse response from the API call 
     */
    public DeleteFileResponse deleteFile(
                final String path,
                final String commit
    ) throws Throwable {
        APICallBackCatcher<DeleteFileResponse> callback = new APICallBackCatcher<DeleteFileResponse>();
        deleteFileAsync(path, commit, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * TODO: type endpoint description here
     * @param    path    Required parameter: Example: 
     * @param    commit    Optional parameter: Example: false
     * @return    Returns the void response from the API call 
     */
    public void deleteFileAsync(
                final String path,
                final String commit,
                final APICallBack<DeleteFileResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = String.format(Configuration.baseUri, Configuration.accountId);

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/v2/files/{path}/");

                //process template parameters
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
                    private static final long serialVersionUID = 5161261294124183432L;
                    {
                        put( "path", path );
                    }});

                //process query parameters
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
                    private static final long serialVersionUID = 5191494389137462926L;
                    {
                        put( "commit", (commit != null) ? commit : "false" );
                    }});
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 4863135674067546525L;
                    {
                        put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
                        put( "user-agent", "APIMATIC 2.0" );
                        put( "accept", "application/json" );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().delete(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            DeleteFileResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<DeleteFileResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * TODO: type endpoint description here
     * @param    path    Required parameter: Example: 
     * @param    startVersion    Optional parameter: Example: 
     * @param    stopVersion    Optional parameter: Example: 
     * @param    limit    Optional parameter: Example: 
     * @return    Returns the ListFileVersionsResponse response from the API call 
     */
    public ListFileVersionsResponse listFileVersions(
                final String path,
                final Integer startVersion,
                final Integer stopVersion,
                final Integer limit
    ) throws Throwable {
        APICallBackCatcher<ListFileVersionsResponse> callback = new APICallBackCatcher<ListFileVersionsResponse>();
        listFileVersionsAsync(path, startVersion, stopVersion, limit, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * TODO: type endpoint description here
     * @param    path    Required parameter: Example: 
     * @param    startVersion    Optional parameter: Example: 
     * @param    stopVersion    Optional parameter: Example: 
     * @param    limit    Optional parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void listFileVersionsAsync(
                final String path,
                final Integer startVersion,
                final Integer stopVersion,
                final Integer limit,
                final APICallBack<ListFileVersionsResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = String.format(Configuration.baseUri, Configuration.accountId);

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/v2/files/{path}/versions");

                //process template parameters
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
                    private static final long serialVersionUID = 4959628466611292585L;
                    {
                        put( "path", path );
                    }});

                //process query parameters
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
                    private static final long serialVersionUID = 5577922796034127171L;
                    {
                        put( "start-version", startVersion );
                        put( "stop-version", stopVersion );
                        put( "limit", limit );
                    }});
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 4905123916634294331L;
                    {
                        put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
                        put( "user-agent", "APIMATIC 2.0" );
                        put( "accept", "application/json" );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            ListFileVersionsResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<ListFileVersionsResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * TODO: type endpoint description here
     * @param    path    Required parameter: Example: 
     * @param    version    Required parameter: Example: 
     * @return    Returns the ListSingleFileVersionResponse response from the API call 
     */
    public ListSingleFileVersionResponse listSingleFileVersion(
                final String path,
                final int version
    ) throws Throwable {
        APICallBackCatcher<ListSingleFileVersionResponse> callback = new APICallBackCatcher<ListSingleFileVersionResponse>();
        listSingleFileVersionAsync(path, version, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * TODO: type endpoint description here
     * @param    path    Required parameter: Example: 
     * @param    version    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void listSingleFileVersionAsync(
                final String path,
                final int version,
                final APICallBack<ListSingleFileVersionResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = String.format(Configuration.baseUri, Configuration.accountId);

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/v2/files/{path}/versions/{version}");

                //process template parameters
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
                    private static final long serialVersionUID = 5743923946322150295L;
                    {
                        put( "path", path );
                        put( "version", version );
                    }});
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 4979649994913040215L;
                    {
                        put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
                        put( "user-agent", "APIMATIC 2.0" );
                        put( "accept", "application/json" );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            ListSingleFileVersionResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<ListSingleFileVersionResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * TODO: type endpoint description here
     * @param    path    Required parameter: Example: 
     * @return    Returns the ListSingleFileVersionResponse response from the API call 
     */
    public ListSingleFileVersionResponse getFileMeta(
                final String path
    ) throws Throwable {
        APICallBackCatcher<ListSingleFileVersionResponse> callback = new APICallBackCatcher<ListSingleFileVersionResponse>();
        getFileMetaAsync(path, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * TODO: type endpoint description here
     * @param    path    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void getFileMetaAsync(
                final String path,
                final APICallBack<ListSingleFileVersionResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = String.format(Configuration.baseUri, Configuration.accountId);

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/v2/files/{path}/meta");

                //process template parameters
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
                    private static final long serialVersionUID = 5668500679102701292L;
                    {
                        put( "path", path );
                    }});
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 4809922093583834935L;
                    {
                        put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
                        put( "user-agent", "APIMATIC 2.0" );
                        put( "accept", "application/json" );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            ListSingleFileVersionResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<ListSingleFileVersionResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * TODO: type endpoint description here
     * @param    path    Required parameter: Example: 
     * @param    name    Optional parameter: Example: 
     * @param    extension    Optional parameter: Example: 
     * @param    dateCreated    Optional parameter: Example: 
     * @param    dateMetaLastModified    Optional parameter: Example: 
     * @param    dateContentLastModified    Optional parameter: Example: 
     * @param    mime    Optional parameter: Example: 
     * @param    applicationData    Optional parameter: Example: 
     * @param    version    Optional parameter: Example: 
     * @param    versionConflict    Optional parameter: Example: 
     * @return    Returns the ListSingleFileVersionResponse response from the API call 
     */
    public ListSingleFileVersionResponse createAfterFileMeta(
                final String path,
                final String name,
                final String extension,
                final DateTime dateCreated,
                final DateTime dateMetaLastModified,
                final DateTime dateContentLastModified,
                final String mime,
                final Object applicationData,
                final Integer version,
                final String versionConflict
    ) throws Throwable {
        APICallBackCatcher<ListSingleFileVersionResponse> callback = new APICallBackCatcher<ListSingleFileVersionResponse>();
        createAfterFileMetaAsync(path, name, extension, dateCreated, dateMetaLastModified, dateContentLastModified, mime, applicationData, version, versionConflict, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * TODO: type endpoint description here
     * @param    path    Required parameter: Example: 
     * @param    name    Optional parameter: Example: 
     * @param    extension    Optional parameter: Example: 
     * @param    dateCreated    Optional parameter: Example: 
     * @param    dateMetaLastModified    Optional parameter: Example: 
     * @param    dateContentLastModified    Optional parameter: Example: 
     * @param    mime    Optional parameter: Example: 
     * @param    applicationData    Optional parameter: Example: 
     * @param    version    Optional parameter: Example: 
     * @param    versionConflict    Optional parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void createAfterFileMetaAsync(
                final String path,
                final String name,
                final String extension,
                final DateTime dateCreated,
                final DateTime dateMetaLastModified,
                final DateTime dateContentLastModified,
                final String mime,
                final Object applicationData,
                final Integer version,
                final String versionConflict,
                final APICallBack<ListSingleFileVersionResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = String.format(Configuration.baseUri, Configuration.accountId);

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/v2/files/{path}/meta");

                //process template parameters
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
                    private static final long serialVersionUID = 5116967767015996279L;
                    {
                        put( "path", path );
                    }});
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 4983581933470756634L;
                    {
                        put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
                        put( "user-agent", "APIMATIC 2.0" );
                        put( "accept", "application/json" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = 4699468069009575973L;
                    {
                        put( "name", name );
                        put( "extension", extension );
                        put( "date_created", DateTimeHelper.toRfc8601DateTime(dateCreated) );
                        put( "date_meta_last_modified", DateTimeHelper.toRfc8601DateTime(dateMetaLastModified) );
                        put( "date_content_last_modified", DateTimeHelper.toRfc8601DateTime(dateContentLastModified) );
                        put( "mime", mime );
                        put( "application_data", applicationData );
                        put( "version", version );
                        put( "version-conflict", versionConflict );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters));

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            ListSingleFileVersionResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<ListSingleFileVersionResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * TODO: type endpoint description here
     * @param    path    Required parameter: Example: 
     * @param    version    Required parameter: Example: 
     * @return    Returns the ListSingleFileVersionResponse response from the API call 
     */
    public ListSingleFileVersionResponse createPromoteFileVersion(
                final String path,
                final int version
    ) throws Throwable {
        APICallBackCatcher<ListSingleFileVersionResponse> callback = new APICallBackCatcher<ListSingleFileVersionResponse>();
        createPromoteFileVersionAsync(path, version, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * TODO: type endpoint description here
     * @param    path    Required parameter: Example: 
     * @param    version    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void createPromoteFileVersionAsync(
                final String path,
                final int version,
                final APICallBack<ListSingleFileVersionResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = String.format(Configuration.baseUri, Configuration.accountId);

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/v2/files/{path}/versions/{version}?operation=promote");

                //process template parameters
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
                    private static final long serialVersionUID = 4951805757153822142L;
                    {
                        put( "path", path );
                        put( "version", version );
                    }});
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 4631931545278661843L;
                    {
                        put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
                        put( "user-agent", "APIMATIC 2.0" );
                        put( "accept", "application/json" );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            ListSingleFileVersionResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<ListSingleFileVersionResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}