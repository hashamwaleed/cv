/*
 * BitcasaLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package io.cloudfs.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.type.TypeReference;
import org.joda.time.DateTime;

import io.cloudfs.*;
import io.cloudfs.models.*;
import io.cloudfs.exceptions.*;
import io.cloudfs.http.client.HttpClient;
import io.cloudfs.http.client.HttpContext;
import io.cloudfs.http.request.HttpRequest;
import io.cloudfs.http.response.HttpResponse;
import io.cloudfs.http.response.HttpStringResponse;
import io.cloudfs.http.client.APICallBack;
import io.cloudfs.controllers.syncwrapper.APICallBackCatcher;

public class CreateAccountController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static CreateAccountController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the CreateAccountController class 
     */
    public static CreateAccountController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new CreateAccountController();
            }
        }
        return instance;
    }

    /**
     * create new user 
     * @param    date    Required parameter: Example: 
     * @param    username    Required parameter: Example: 
     * @param    password    Required parameter: Example: 
     * @param    authorization    Required parameter: BCS client_application_id:request_signature
     * @param    email    Optional parameter: Example: 
     * @param    firstName    Optional parameter: Example: 
     * @param    lastName    Optional parameter: Example: 
     * @return    Returns the GetProfileResponse response from the API call 
     */
    public GetProfileResponse createAccount(
                final DateTime date,
                final String username,
                final String password,
                final String authorization,
                final String email,
                final String firstName,
                final String lastName
    ) throws Throwable {
        APICallBackCatcher<GetProfileResponse> callback = new APICallBackCatcher<GetProfileResponse>();
        createAccountAsync(date, username, password, authorization, email, firstName, lastName, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * create new user 
     * @param    date    Required parameter: Example: 
     * @param    username    Required parameter: Example: 
     * @param    password    Required parameter: Example: 
     * @param    authorization    Required parameter: BCS client_application_id:request_signature
     * @param    email    Optional parameter: Example: 
     * @param    firstName    Optional parameter: Example: 
     * @param    lastName    Optional parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void createAccountAsync(
                final DateTime date,
                final String username,
                final String password,
                final String authorization,
                final String email,
                final String firstName,
                final String lastName,
                final APICallBack<GetProfileResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = String.format(Configuration.baseUri, Configuration.accountId);

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/v2/admin/cloudfs/customers/");
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 5701648636176397357L;
                    {
                        put( "Date", DateTimeHelper.toRfc8601DateTime(date) );
                        put( "Authorization", authorization );
                        put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
                        put( "user-agent", "APIMATIC 2.0" );
                        put( "accept", "application/json" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = 5150090622951651106L;
                    {
                        put( "username", username );
                        put( "password", password );
                        put( "email", email );
                        put( "first_name", firstName );
                        put( "last_name", lastName );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters));

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            GetProfileResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetProfileResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}